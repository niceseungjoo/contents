import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import platform

#  운영체제에 맞는 한글 폰트 설정
if platform.system() == 'Windows':
    # 윈도우의 경우
    plt.rc('font', family='Malgun Gothic')
elif platform.system() == 'Darwin':
    # Mac의 경우
    plt.rc('font', family='AppleGothic')
else:
    # 리눅스의 경우 (나눔고딕 폰트 설치 필요)
    plt.rc('font', family='NanumGothic')

# 글꼴을 바꾼 뒤 마이너스 기호(-)가 깨지는 것을 방지
plt.rc('axes', unicode_minus=False)

# 1. 데이터 준비 (가상의 데이터)
np.random.seed(0)
# 면적 (X: 독립 변수)
X = np.random.rand(100, 1) * 100
# 가격 (Y: 종속 변수) - 면적에 비례하고 노이즈 추가
y = 3 * X + 10 + np.random.randn(100, 1) * 20

# 2. 학습/테스트 데이터 분리
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 3. 모델 학습
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)

# 4. 예측
y_pred = lin_reg.predict(X_test)

# 5. 성능 평가
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"회귀 계수 (W): {lin_reg.coef_[0][0]:.2f}")
print(f"절편 (b): {lin_reg.intercept_[0]:.2f}")
print(f"MSE (평균 제곱 오차): {mse:.2f}")
print(f"R-squared: {r2:.2f}")

# 6. 예측 결과 시각화
plt.figure(figsize=(10, 6))
plt.scatter(X, y, label='원본 데이터', alpha=0.6)
# 학습된 회귀선 시각화
plt.plot(X_test, y_pred, color='red', linewidth=3, label='선형 회귀선')
plt.title('Linear Regression: 면적에 따른 주택 가격 예측')
plt.xlabel('면적 (단위: $m^2$)')
plt.ylabel('가격 (단위: 천만원)')
plt.legend()
plt.grid(True)
plt.show()
